// <auto-generated />
using System;
using Infra;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infra.Migrations
{
    [DbContext(typeof(App1Context))]
    partial class App1ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.OrderRoot.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Orders");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Order");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Core.OrderRoot.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");

                    b.HasDiscriminator<string>("Discriminator").HasValue("OrderItem");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Core.SpecialOrderRoot.SpecialItemData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("LocalOrderItemId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SpecialOrderItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocalOrderItemId");

                    b.HasIndex("SpecialOrderItemId");

                    b.ToTable("SpecialItemDatas");
                });

            modelBuilder.Entity("Core.LocalOrderRoot.LocalOrder", b =>
                {
                    b.HasBaseType("Core.OrderRoot.Order");

                    b.Property<string>("SellerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("LocalOrder");
                });

            modelBuilder.Entity("Core.SpecialOrderRoot.SpecialOrder", b =>
                {
                    b.HasBaseType("Core.OrderRoot.Order");

                    b.Property<string>("SellerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Orders", t =>
                        {
                            t.Property("SellerName")
                                .HasColumnName("SpecialOrder_SellerName");
                        });

                    b.HasDiscriminator().HasValue("SpecialOrder");
                });

            modelBuilder.Entity("Core.LocalOrderRoot.LocalOrderItem", b =>
                {
                    b.HasBaseType("Core.OrderRoot.OrderItem");

                    b.Property<string>("VendorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("LocalOrderItem");
                });

            modelBuilder.Entity("Core.SpecialOrderRoot.SpecialOrderItem", b =>
                {
                    b.HasBaseType("Core.OrderRoot.OrderItem");

                    b.Property<string>("VendorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("OrderItems", t =>
                        {
                            t.Property("VendorName")
                                .HasColumnName("SpecialOrderItem_VendorName");
                        });

                    b.HasDiscriminator().HasValue("SpecialOrderItem");
                });

            modelBuilder.Entity("Core.OrderRoot.OrderItem", b =>
                {
                    b.HasOne("Core.OrderRoot.Order", null)
                        .WithMany("Items")
                        .HasForeignKey("OrderId");

                    b.OwnsOne("Core.OrderRoot.Address", "Address", b1 =>
                        {
                            b1.Property<int>("OrderItemId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OrderItemId");

                            b1.ToTable("OrderItems");

                            b1.WithOwner()
                                .HasForeignKey("OrderItemId");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("Core.SpecialOrderRoot.SpecialItemData", b =>
                {
                    b.HasOne("Core.LocalOrderRoot.LocalOrderItem", null)
                        .WithMany("LocalItemDatas")
                        .HasForeignKey("LocalOrderItemId");

                    b.HasOne("Core.SpecialOrderRoot.SpecialOrderItem", null)
                        .WithMany("SpecialItemDatas")
                        .HasForeignKey("SpecialOrderItemId");
                });

            modelBuilder.Entity("Core.OrderRoot.Order", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Core.LocalOrderRoot.LocalOrderItem", b =>
                {
                    b.Navigation("LocalItemDatas");
                });

            modelBuilder.Entity("Core.SpecialOrderRoot.SpecialOrderItem", b =>
                {
                    b.Navigation("SpecialItemDatas");
                });
#pragma warning restore 612, 618
        }
    }
}
